(function() {
    const lang = navigator.language || navigator.userLanguage || "en";
    const supportedLangs = ["ja", "en", "it", "es", "el", "hi", "pl", "zh", "fr", "de", "ko", "pt", "ru", "ar", "nl", "vi", "et", "th", "cs", "da"];
    const activeLang = supportedLangs.includes(lang.slice(0, 2)) ? lang.slice(0, 2) : "en";
    const keys = ["copy", "email", "blog", "follow", "search", "thanks", "share"];
    const translations = {};
    const REQUEST_TIMEOUT = 5000;
    if (!window._weshareLangMap) {
        window._weshareLangMap = {};
    }
    
    // Add completion signal for patch script
    if (!window._weshareTranslationComplete) {
        window._weshareTranslationComplete = false;
    }
    
    function applyTranslations() {
        Object.assign(window._weshareLangMap, translations);
    }
    
    async function fetchTranslation(key) {
        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), REQUEST_TIMEOUT);
            const url = https://weshare-ai-language.vercel.app/api/translate?lang=${activeLang}&text=${encodeURIComponent(key)};
            const response = await fetch(url, { 
                signal: controller.signal,
                mode: 'cors',
                credentials: 'omit'
            });
            clearTimeout(timeoutId);
            if (!response.ok) {
                throw new Error(HTTP error! status: ${response.status});
            }
            const data = await response.json();
            translations[key] = (data.translation || key).replace(/^"+|"+$/g, "");
            applyTranslations();
        } catch (error) {
            console.warn(Translation failed for key "${key}":, error.message);
            // Use fallback text instead of the key
            const fallbackTexts = {
                'copy': 'Copy Link',
                'email': 'email', 
                'blog': 'blog post',
                'follow': 'follow us',
                'search': 'search social networks',
                'thanks': 'thanks! share again',
                'share': 'share'
            };
            translations[key] = fallbackTexts[key] || key;
            applyTranslations();
        }
    }
    
    async function processTranslations() {
        const batchSize = 3;
        for (let i = 0; i < keys.length; i += batchSize) {
            const batch = keys.slice(i, i + batchSize);
            await Promise.all(batch.map(key => fetchTranslation(key)));
        }
        
        // Signal that all translations are complete
        window._weshareTranslationComplete = true;
        console.log("[Translation] All translations completed");
        
        // Dispatch custom event for patch script
        const event = new CustomEvent('weshareTranslationsComplete', {
            detail: { translations: window._weshareLangMap }
        });
        window.dispatchEvent(event);
    }
    
    setTimeout(processTranslations, 100);
})();